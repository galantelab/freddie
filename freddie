#!/usr/bin/env bash

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
ROOT_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$ROOT_DIR/lib/freddie_common"

usage() {
	echo "$PROG_NAME $VERSION"
	echo ""
	echo "Usage: $PROG_NAME [-hV]"
	echo "Usage: $PROG_NAME <command> [options]"
	echo ""
	echo "Options:"
	echo "  -h, --help       Print this help"
	echo "  -V, --version    Print current version"
	echo ""
	echo "Commands:"
	echo "  string           Assemble sequenced reads"
	echo "  chimeric         Find potential chimeric transcripts"
	echo "  coding           Estimate the chance of a coding chimeric"
	echo "                   transcript"
	echo "  pfam             Analyze the generated sequences' domains"
	echo "                   relative to the host transcript"
	echo "  expression       Measure the expression of transcripts"
	echo "  results          Compile results from the previous steps"
	echo ""
}

parse_opt() {
	# TEMP cannot be local
	TEMP=$(getopt \
		-o 'hV' \
		--long 'help,version' \
		-n "$PROG_NAME" -- "$@") \
		|| error "$(try_help)"

	eval set -- "$TEMP"
	unset TEMP

	while true; do
		case "$1" in
			-h|--help)
				usage
				exit
				;;
			-V|--version)
				echo "$VERSION"
				exit
				;;
			--)
				shift
				break
				;;
			*)
				error "Internal error!"
				;;
		esac
		shift
	done
}

parse_cmd() {
	local cmd="$1"; shift

	case "$cmd" in
		string)     ;;
		chimeric)   ;;
		coding)     ;;
		pfam)       ;;
		expression) ;;
		results)    ;;
		*)
			error "'$cmd' is not a valid command\n$(try_help)"
			;;
	esac

	exec "$ROOT_DIR/bin/${PROG_NAME}_${cmd}" "$@"
}

[[ $# == 0 ]] && { usage; exit; }

if [[ "$1" =~ ^- ]]; then
	parse_opt "$@"
else
	parse_cmd "$@"
fi
