#!/usr/bin/env bash

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/freddie_common"

# My name
SCRIPT_NAME="${0##*/}"

# Command name
CMD_NAME="${SCRIPT_NAME#${PROG_NAME}_}"

usage() {
	local name_space=$(echo "$PROG_NAME $CMD_NAME" | tr '[:alnum:]' ' ')

	echo "$PROG_NAME $VERSION"
	echo "$PROG_NAME $CMD_NAME (aka $SCRIPT_NAME)"
	echo ""
	echo "Usage: $PROG_NAME $CMD_NAME [-h] [-t INT] [-e STRING] [-f FILE]"
	echo "       $name_space -o DIR -g FILE <FILE> ..."
	echo ""
	echo "Arguments:"
	echo "  One or more alignment file in BAM format"
	echo ""
	echo "Mandatory Options:"
	echo "  -o, --output-dir   Output directory. Create the directory"
	echo "                     if it does not exist"
	echo "  -g, --gtf          Gene annotation on the reference genome"
	echo "                     in GTF format"
	echo "  -f, --bam-list     File containing a newline separated list"
	echo "                     of alignment files in BAM format. This"
	echo "                     option is not mandatory if one or more"
	echo "                     BAM files are passed as argument"
	echo ""
	echo "Options:"
	echo "  -h, --help         Print this help"
	echo "  -t, --threads      Number of threads [default: $threads]"
	echo "  -e, --experiment   Type of reads (short or long)"
	echo "                     [default: $experiment]"
	echo ""
}

validate_opt() {
	local bam

	# Mandatory options '-o', '-g' and '-f'
	if [[ -z "$output_dir" ]]; then
		try_help_and_die "Missing '-o' option"
	fi

	# If there is no bam_list test for args
	# Then, check for valid bam files
	if [[ -z "$bam_list" ]]; then
		if [[ "${#bams[@]}" == 0 ]]; then
			try_help_and_die "Neither '-f' option nor BAM file were passed"
		fi
		for bam in "${bams[@]}"; do
			if [[ ! -f "$bam" ]]; then
				error "No such file '$bam'"
			fi
		done
	elif [[ ! -f "$bam_list" ]]; then
		error "No such file '$bam_list'"
	else
		while read bam; do
			if [[ ! -f "$bam" ]]; then
				error "No such file '$bam'"
			fi
		done < "$bam_list"
	fi

	if [[ -z "$gtf" ]]; then
		try_help_and_die "Missing '-g' option"
	elif [[ ! -f "$gtf" ]]; then
		error "No such file '$gtf'"
	fi

	# Options
	if [[ ! "$experiment" =~ ^(short|long)$ ]]; then
		try_help_and_die "'$experiment' is not a valid '-e' option"
	fi

	if [[ ! "$threads" =~ ^[0-9]+$ ]] || [[ "$threads" -lt 1 ]]; then
		try_help_and_die "'$threads' is not a valid '-t' option"
	fi
}

validate_dep() {
	echo "I have no dep"
}

# Options
output_dir=""
bam_list=""
bams=()
gtf=""
threads=8
experiment="short"

# Processing variables
cod="" # Current output dir
paramet=""
stringtie_threads=2
parallel_max_procs=1

[[ $# -eq 0 ]] && { usage; exit; }

TEMP=$(getopt \
	-o 'ho:t:e:g:f:' \
	--long 'help,output-dir:,threads:,experiment:,gtf:,bam-list:' \
	-n "$PROG_NAME $CMD_NAME" -- "$@") \
	|| try_help_and_die

eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
		-h|--help)
			usage
			exit
			;;
		-o|--output-dir)
			output_dir="$2"
			shift 2
			;;
		-t|--threads)
			threads="$2"
			shift 2
			;;
		-e|--experiment)
			experiment="$2"
			shift 2
			;;
		-g|--gtf)
			gtf="$2"
			shift 2
			;;
		-f|--bam-list)
			bam_list="$2"
			shift 2
			;;
		--)
			shift
			break
			;;
		*)
			error "Internal error!"
			;;
	esac
done

# Get the files if they were passed as arg
for arg; do
	bams+=("$arg")
done

# Check for errors
validate_opt
#validate_dep

# MAIN

# Load all files from $bam_list file to $bams=()
if [[ -n "$bam_list" ]]; then
	# Reset bams=() - just in case
	bams=()
	while read; do
		bams+=("$REPLY")
	done < "$bam_list"
fi

if [[ "$experiment" == "long" ]]; then
	paramet="-L -a 3"
fi

# The max number of jobs is 'threads', then
# set stringtie_threads and parallel_max_procs accordingly
if (( threads < stringtie_threads )); then
	stringtie_threads=$threads
else
	parallel_max_procs=$(( threads / stringtie_threads ))
fi

# Output dir concerning this command
cod="$output_dir/$CMD_NAME"

# Create the base
mkdir -p "$cod"

log_info 'Running Stringtie'
parallel \
	--max-procs=$parallel_max_procs \
	--joblog="$cod/stringtie_job.log" \
	stringtie \
		'{}' \
		$paramet \
		-G "$gtf" \
		-p $stringtie_threads \
		-o "$cod"/'{/.}'.gtf \
		'2>' "$cod"/'{/.}'.gtf.log \
	::: "${bams[@]}"

if [[ "$?" -ne 0 ]]; then
	log_error \
		"stringtie failed:" \
		"See '$(readlink -f "$cod/stringtie_job.log")'" \
		"for more details"
fi

log_info 'Joining gtfs'
stringtie --merge \
	-p $threads \
	-G "$gtf" \
	-o "$cod/merge.gtf" \
	"$cod"/*.gtf \
	2> "$cod/merge.gtf.log" \
	|| log_error \
		"stringtie --merge failed:" \
		"See '$(readlink -f "$cod/merge.gtf.log")'" \
		"for more details"

log_info "Done"
