#!/usr/bin/env bash

# TODO: Remove fastq and use all BAMs as arguments

## Annotation gencode
## Prefix
## Bams files
## freddie string -p K562_short -f files.txt -t 8 -e long -g <gtf/path>

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/freddie_common"

# My name
SCRIPT_NAME="${0##*/}"

# Command name
CMD_NAME="${SCRIPT_NAME#${PROG_NAME}_}"

usage() {
	echo "$PROG_NAME $VERSION"
	echo "$PROG_NAME $CMD_NAME (aka $SCRIPT_NAME)"
	echo "Usage: $PROG_NAME $CMD_NAME [options]"
}

validate_opt() {
	local bam

	# Mandatory options '-o', '-g' and '-f'
	if [[ -z "$output_dir" ]]; then
		error "Missing '-o' option\n$(try_help)"
	fi

	# If there is no fastq test for args
	# Then, check for valid bam files
	if [[ -z "$fastq" ]]; then
		if [[ "${#bams[@]}" == 0 ]]; then
			error "Neither '-f' option nor BAM file were passed\n$(try_help)"
		fi
		for bam in "${bams[@]}"; do
			if [[ ! -f "$bam" ]]; then
				error "No such file '$bam'"
			fi
		done
	elif [[ ! -f "$fastq" ]]; then
		error "No such file '$fastq'"
	else
		while read bam; do
			if [[ ! -f "$bam" ]]; then
				error "No such file '$bam'"
			fi
		done < "$fastq"
	fi

	if [[ -z "$gtf" ]]; then
		error "Missing '-g' option\n$(try_help)"
	elif [[ ! -f "$gtf" ]]; then
		error "No such file '$gtf'"
	fi

	# Options
	if [[ ! "$experiment" =~ ^(short|long)$ ]]; then
		error "'$experiment' is not a valid '-e' option\n$(try_help)"
	fi

	if [[ ! "$threads" =~ ^[0-9]+$ ]] || [[ "$threads" -lt 1 ]]; then
		error "'$threads' is not a valid '-t' option\n$(try_help)"
	fi

}

validate_dep() {
	echo "I have no dep"
}

# Options
output_dir=""
fastq="" # Os BAMS estÃ£o em fastq?
bams=()
gtf="" # Pode ser gff?
threads=8
experiment="short"

# Processing variables
cod="" # Current output dir
paramet=""
stringtie_nprocs=2
jobs=1

[[ $# == 0 ]] && { usage; exit; }

while getopts ":ho:t:e:g:f:" OPTION; do
	case "$OPTION" in
		h)
			usage
			exit
			;;
		o)
			output_dir="$OPTARG"
			;;
		t)
			threads="$OPTARG"
			;;
		e)
			experiment="$OPTARG"
			;;
		g)
			gtf="$OPTARG"
			;;
		f)
			fastq="$OPTARG"
			;;
		?)
			error "No such option '-$OPTARG'\n$(try_help)"
			;;
	esac
done

# Get the files if they were passed as arg
shift $(($OPTIND - 1))
bams=("$@")

# Check for errors
validate_opt
#validate_dep

# MAIN

# Load all files from $fastq file to $bams=()
if [[ -n "$fastq" ]]; then
	# Reset bams=() - just in case
	bams=()
	while read; do
		bams+=("$REPLY")
	done < "$fastq"
fi

if [[ "$experiment" == "long" ]]; then
	paramet="-L -a 3"
fi

# The max number of jobs is threads, then
# set stringtie_nprocs and jobs accordingly
if (( threads < stringtie_nprocs )); then
	stringtie_nprocs=$threads
else
	jobs=$(( threads / stringtie_job ))
fi

# Output dir concerning this command
cod="$output_dir/$CMD_NAME"

# Create the base
mkdir -p "$cod"

log_info 'Running Stringtie'
parallel \
	--max-procs=$jobs \
	--joblog="$cod/stringtie_job.log" \
	stringtie \
		'{}' \
		"$paramet" \
		-G "$gtf" \
		-p $stringtie_nprocs \
		-o "$cod"/'{/.}'.gtf \
		'2>' "$cod"/'{/.}'.gtf.log \
	::: "${bams[@]}"

if [[ "$?" -ne 0 ]]; then
	log_error \
		"stringtie failed:" \
		"See '$(readlink -f "$cod/stringtie_job.log")'" \
		"for more details"
fi

log_info 'Joining gtfs'
stringtie --merge \
	-p $threads \
	-G "$gtf" \
	-o "$cod/merge.gtf" \
	"$cod"/*.gtf \
	2> "$cod/merge.gtf.log" \
	|| log_error \
		"stringtie --merge failed:" \
		"See '$(readlink -f "$cod/merge.gtf.log")'"
		"for more details"

log_info "Done"
