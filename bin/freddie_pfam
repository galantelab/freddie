#!/usr/bin/env bash

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/freddie_common"

# My name
SCRIPT_NAME="${0##*/}"

# Command name
CMD_NAME="${SCRIPT_NAME#${PROG_NAME}_}"

# Dep files: coding
CODING_NOVEL_PROTEINS_FASTA="coding/novel_proteins.fa"
CODING_ANN_PROTEINS_FASTA="coding/ann_proteins.fa"
CODING_TRANSCRIPT_TXT="coding/transcript.txt"
CODING_CODING_TXT="coding/coding.txt"

usage() {
	echo "$PROG_NAME $VERSION"
	echo "$PROG_NAME $CMD_NAME (aka $SCRIPT_NAME)"
	echo "Usage: $PROG_NAME $CMD_NAME [options]"
}

validate_opt() {
	# Mandatory option '-o' and '-M'
	if [[ -z "$output_dir" ]]; then
		error "Missing '-o' option\n$(try_help)"
	elif [[ ! -d "$output_dir" ]]; then
		error "No such dir '$output_dir'.\nStart" \
			"your analysis from '$PROG_NAME string'"
	fi

	if [[ -z "$pfam_model" ]]; then
		error "Missing '-M' option\n$(try_help)"
	elif [[ ! -f "$pfam_model" ]]; then
		error "No such file '$pfam_model'"
	fi
}

validate_dep() {
	if [[ ! -f "$coding_novel_proteins_fasta" ]]; then
		error "'$coding_novel_proteins_fasta' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi

	if [[ ! -f "$coding_ann_proteins_fasta" ]]; then
		error "'$coding_ann_proteins_fasta' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi

	if [[ ! -f "$coding_transcript_txt" ]]; then
		error "'$coding_transcript_txt' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi

	if [[ ! -f "$coding_coding_txt" ]]; then
		error "'$coding_coding_txt' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi
}

# Options
output_dir=""
pfam_model=""

# Processing variables
cod="" # Current output dir
tdir=""
coding_novel_proteins_fasta=""
coding_ann_proteins_fasta=""
coding_transcript_txt=""
coding_coding_txt=""

[[ $# == 0 ]] && { usage; exit; }

while getopts ":ho:M:" OPTION; do
	case "$OPTION" in
		h)
			usage
			exit
			;;
		o)
			output_dir="$OPTARG"
			;;
		M)
			pfam_model="$OPTARG"
			;;
		?)
			error "No such option '-$OPTARG'\n$(try_help)"
			;;
	esac
done

# Check for errors in opt
validate_opt

# Set the dep files paths
coding_novel_proteins_fasta="$output_dir/$CODING_NOVEL_PROTEINS_FASTA"
coding_ann_proteins_fasta="$output_dir/$CODING_ANN_PROTEINS_FASTA"
coding_transcript_txt="$output_dir/$CODING_TRANSCRIPT_TXT"
coding_coding_txt="$output_dir/$CODING_CODING_TXT"

# Check for errors in dep
validate_dep

# MAIN

# Output dir concerning this command
cod="$output_dir/$CMD_NAME"

# Create the base
mkdir -p "$cod"

# Create a temp dir
tdir=$(mktemp -d)

# Remove it automagicly
trap 'rm -rf "$tdir"' EXIT

log_info "Running PFAM..."
cat \
	"$coding_novel_proteins_fasta" \
	"$coding_ann_proteins_fasta" \
	> "$tdir/pfam.fa"

# O usuário que passe o modelo?
#if ! [ -f /home/ref/Pfam-A.hmm ]; then
#	wget --directory-prefix=/home/ref/ ftp://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam31.0/Pfam-A.hmm.gz
#	gunzip /home/ref/Pfam-A.hmm.gz
#	hmmpress /home/ref/Pfam-A.hmm
#fi

# --cpu e -E podem ser passado pelo usuário?
hmmsearch \
	--tblout "$cod/pfam.hmm" \
	-E 1e-6 \
	--cpu 4 \
	"$pfam_model" \
	"$tdir/pfam.fa" \
	> "$cod/pfam.hmm.stdout.log" \
	2> "$cod/pfam.hmm.stderr.log" \
	|| log_error \
		"hmmsearch failed:" \
		"See '$(readlink -f "$cod/pfam.hmm.stderr.log")'" \
		"for more details"

log_info "Comparing chimeric domains with host domains"
sed "s/\ gene=/\t/g" "$coding_transcript_txt" > "$tdir/transcript.txt"

join -1 2 -2 1 \
	<(sort -k2,2 "$tdir/transcript.txt") \
	<(sort -k1,1 "$coding_coding_txt") \
	| sed 's/ /\t/g' \
	> "$tdir/join.txt"

while read gene trans host; do
	grep -w "$trans" \
		"$cod/pfam.hmm" \
		> "$tdir/$trans.$host.txt"

	grep -w "$host" \
		"$cod/pfam.hmm" \
		>> "$tdir/$trans.$host.txt"

	grep -v '#' "$tdir/$trans.$host.txt" \
		| awk -F" " '{print $1,$3,$6,$4}' \
		> "$tdir/pfam.txt"

	python3 "$BIN_DIR/../scripts/comp_dom.py" \
		"$tdir/pfam.txt" \
		"$trans" \
		> "$tdir/$trans.$host.pfam.tsv" \
		|| log_error "'comp_dom.py' failed"
done < "$tdir/join.txt"

# Talves esta parte possa ser simplificada para:
# cat "$tdir"/*.pfam.tsv | grep -v '#' > "$cod/info_dom.tsv"?
for trans in $(cut -f 2 "$tdir/transcript.txt"); do
	cat "$tdir/$trans".*.pfam.tsv \
		| grep -v '#' \
		> "$tdir/$trans.pfamf.tsv"
done

cat "$tdir"/*.pfamf.tsv > "$cod/info_dom.tsv"

log_info "Done"
