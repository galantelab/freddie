#!/usr/bin/env bash

## Annotation gencode
## Prefix
## freddie coding -p K562_short -m <name-to-rnasambamodel> -d <path-to-proteinseq>

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/freddie_common"

# My name
SCRIPT_NAME="${0##*/}"

# Command name
CMD_NAME="${SCRIPT_NAME#${PROG_NAME}_}"

# Dep files: chimeric
CHIMERIC_FASTA="chimeric/chimeric.fasta"
CHIMERIC_MOST_SHARED_TSV="chimeric/most_shared.tsv"


usage() {
	echo "$PROG_NAME $VERSION"
	echo "$PROG_NAME $CMD_NAME (aka $SCRIPT_NAME)"
	echo "Usage: $PROG_NAME $CMD_NAME [options]"
}

validate_opt() {
	# Mandatory options '-o', '-m' and '-d'
	if [[ -z "$output_dir" ]]; then
		error "Missing '-o' option\n$(try_help)"
	elif [[ ! -d "$output_dir" ]]; then
		error "No such dir '$output_dir'.\nStart" \
			"your analysis from '$PROG_NAME string'"
	fi

	if [[ -z "$model" ]]; then
		error "Missing '-m' option\n$(try_help)"
	elif [[ ! -f "$model" ]]; then
		error "No such file '$model'"
	fi

	if [[ -z "$protein_db" ]]; then
		error "Missing '-d' option\n$(try_help)"
	elif [[ ! -f "$protein_db" ]]; then
		error "No such file '$protein_db'"
	fi
}

validate_dep() {
	# chimeric
	if [[ ! -f "$chimeric_fasta" ]]; then
		error "'$chimeric_fasta' not found\n.Maybe" \
			"you need to run '$PROG_NAME chimeric' before"
	fi

	if [[ ! -f "$chimeric_most_shared_tsv" ]]; then
		error "'$chimeric_most_shared_tsv' not found\n.Maybe" \
			"you need to run '$PROG_NAME chimeric' before"
	fi
}

# Options
output_dir=""
model=""
protein_db=""

# Processing variables
cod="" # Current output dir
chimeric_fasta=""
chimeric_most_shared_tsv=""

[[ $# == 0 ]] && { usage; exit; }

while getopts ":ho:m:d:" OPTION; do
	case "$OPTION" in
		h)
			usage
			exit
			;;
		o)
			output_dir="$OPTARG"
			;;
		m)
			model="$OPTARG"
			;;
		d)
			protein_db="$OPTARG"
			;;
		?)
			error "No such option '-$OPTARG'\n$(try_help)"
			;;
	esac
done

# Check for errors in opt
validate_opt

# Set the dep files paths
chimeric_fasta="$output_dir/$CHIMERIC_FASTA"
chimeric_most_shared_tsv="$output_dir/$CHIMERIC_MOST_SHARED_TSV"

# Check for errors in dep
validate_dep

# MAIN

# Output dir concerning this command
cod="$output_dir/$CMD_NAME"

# Create the base
mkdir -p "$cod"

#Rodar o RNASamba
log_info "Running RNASamba"

# predicted_proteins.fa e chimeric.fasta?
rnasamba classify \
	-p "$cod/predicted_proteins.fa" \
	"$cod/classification.tsv" \
	"$chimeric_fasta" \
	"$model" \
	2> "$cod/classification.tsv.log" \
	|| log_error \
		"rnasamba failed:"
		"See '$(readlink -f "$cod/classification.tsv.log")'" \
		"for more details"

#Movendo os resultados do RNASamba para o output
#mv ann/* output/

#Selecionando somente os transcritos dos protein_coding com protencial codificante
log_info "Selecting chimeric transcripts with coding potential"
awk '{if ($3 >= 0.9) print $1}' "$cod/classification.tsv" \
	| sed 1d | grep -wf - "$chimeric_most_shared_tsv" \
	| cut -d . -f 1,2,3 \
	| sort -u \
	| awk '{print $2"\t"$1}' \
	| cut -d . -f 1,2 \
	|  awk '{print $2"\t"$1}' \
	> "$cod/coding.txt"

awk '{if ($3 >= 0.9) print $1}' "$cod/classification.tsv" \
	| sed 1d \
	| awk -F'.' '{print $1"."$2"."$3" gene="$1"."$2}' \
	> "$cod/transcript.txt"

#Selecionando a sequencia de AA dos respectivos.
seqtk subseq \
	"$cod/predicted_proteins.fa" \
	"$cod/transcript.txt" \
	> "$cod/novel_proteins.fa" \
	2> "$cod/novel_proteins.fa.log" \
	|| log_error \
		"seqtk failed:"
		"See '$(readlink -f "$cod/novel_proteins.fa.log")'" \
		"for more details"

seqtk subseq \
	"$protein_db" \
	<(cut -f 2 "$cod/coding.txt") \
	> "$cod/ann_proteins.fa" \
	2> "$cod/novel_proteins.fa.log" \
	|| log_error \
		"seqtk failed:"
		"See '$(readlink -f "$cod/novel_proteins.fa.log")'" \
		"for more details"

log_info "Done"
